# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CanKahraman
                                 A QGIS plugin
 this This plugin locates MEB schools.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-06-12
        git sha              : $Format:%H$
        copyright            : (C) 2025 by MUGLA SITKI KOCMAN UNIVERSITY
        email                : cankahraman017@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from urllib.parse import urlparse, parse_qs
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .can_kahraman_dialog import CanKahramanDialog
import os.path

# Sonradan Eklenen "Library"
import time
import requests
import webbrowser
import pandas as pd
from qgis.utils import iface
from bs4 import BeautifulSoup
from PyQt5.QtGui import QColor
from selenium import webdriver
from PyQt5.QtCore import QVariant
from selenium.webdriver.common.by import By
from qgis.PyQt.QtWidgets import QMessageBox
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from qgis.core import QgsVectorLayer, QgsField, QgsFeature, QgsGeometry, QgsPointXY, QgsProject
import os
from qgis.PyQt import uic, QtWidgets
from qgis.PyQt.QtCore import Qt # Checkbox durumunu kontrol etmek için
 # HTML içeriğini ayrıştırmak için
 # Web sayfası indirmek için
from openpyxl import Workbook # Excel dosyası oluşturmak için
import re
import unidecode


# Diğer gerekli QGIS import'larınız
from qgis.core import QgsProject, QgsVectorLayer, QgsFeature, QgsGeometry
from qgis.PyQt.QtCore import pyqtSignal


class CanKahraman:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CanKahraman_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)


        
        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Can KAHRAMAN')
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CanKahraman', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/can_kahraman/icon.svg'
        self.add_action(
            icon_path,
            text=self.tr(u'Can KAHRAMAN'),
            callback=self.run,
            parent=self.iface.mainWindow())
        
        

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Can KAHRAMAN'),
                action)
            self.iface.removeToolBarIcon(action)

    def plaka_sehir_name(self):
            return {
                "01": "Adana",
                "02": "Adıyaman",
                "03": "Afyon",
                "04": "Ağrı",    
                "05": "Amasya",
                "06": "Ankara",
                "07": "Antalya",
                "08": "Artvin",
                "09": "Aydın",
                "10": "Balıkesir",
                "11": "Bilecik",
                "12": "Bingöl",
                "13": "Bitlis",
                "14": "Bolu",
                "15": "Burdur",
                "16": "Bursa",
                "17": "Çanakkale",
                "18": "Çankırı",
                "19": "Çorum",
                "20": "Denizli",
                "21": "Diyarbakır",
                "22": "Edirne",
                "23": "Elazığ",
                "24": "Erzincan",
                "25": "Erzurum",
                "26": "Eskişehir",
                "27": "Gaziantep",
                "28": "Giresun",
                "29": "Gümüşhane",
                "30": "Hakkari",
                "31": "Hatay",
                "32": "Isparta",
                "33": "Mersin",
                "34": "İstanbul",
                "35": "İzmir",
                "36": "Kars",
                "37": "Kastamonu",
                "38": "Kayseri",
                "39": "Kırklareli",
                "40": "Kırşehir",
                "41": "Kocaeli",
                "42": "Konya",
                "43": "Kütahya",
                "44": "Malatya",
                "45": "Manisa",
                "46": "Kahramanmaraş",
                "47": "Mardin",
                "48": "Muğla",
                "49": "Muş",
                "50": "Nevşehir",
                "51": "Niğde",
                "52": "Ordu",
                "53": "Rize",
                "54": "Sakarya",
                "55": "Samsun",
                "56": "Siirt",
                "57": "Sinop",
                "58": "Sivas",
                "59": "Tekirdağ",
                "60": "Tokat",    
                "61": "Trabzon",
                "62": "Tunceli",
                "63": "Şanlıurfa",
                "64": "Uşak",
                "65": "Van",    
                "66": "Yozgat",
                "67": "Zonguldak",
                "68": "Aksaray",
                "69": "Bayburt",
                "70": "Karaman",    
                "71": "Kırıkkale",
                "72": "Batman",
                "73": "Şırnak",
                "74": "Bartın",
                "75": "Ardahan",    
                "76": "Iğdır",
                "77": "Yalova",
                "78": "Karabük",
                "79": "Kilis",
                "80": "Osmaniye",    
                "81": "Düzce",}
    




    def populate_city_names_combobox(self):
        """
        City_names adlı QComboBox'u 'kodu - il adı' formatında doldurur
        ve il adına karşılık gelen plaka kodlarını bir sözlükte saklar.
        """
        city_dict = self.plaka_sehir_name()  # plaka-şehir sözlüğünü al

        # Mevcut verileri temizle
        self.dlg.city_names.clear()

        # 'kodu - il adı' formatında QComboBox'a ekle
        for code, name in city_dict.items():
            self.dlg.city_names.addItem(f"{code} - {name}")

        # Şehir adına karşılık gelen plaka kodlarını sakla
        self.city_code_map = {name: code for code, name in city_dict.items()}
    




    def populate_districts_combobox(self, selected_city):
        try:
            excel_path = os.path.join(self.plugin_dir, "iller_ve_ilceler.xlsx")
            df = pd.read_excel(excel_path)

            # 1) Ilçe kodlarını saklayacağımız map’i başlat
            self.district_code_map = {}

            # 2) PROVINCE sütunu plaka koduna eşit olan satırlarda dön
            self.dlg.district.clear()
            for _, row in df[df["PROVINCE"] == selected_city].iterrows():
                ilce_adi = row["DISTRICT NAME"]
                ilce_kodu = row["DISTRICT CODE"]  # Excel’deki ilçenin kodu
                self.dlg.district.addItem(ilce_adi)
                # (plaka_kodu, ilce_adi) ikilisine karşılık kodu sakla
                self.district_code_map[(selected_city, ilce_adi)] = str(ilce_kodu)



        except Exception as e:
            QMessageBox.critical(
                self.iface.mainWindow(),
                "Hata",
                f"İlçeler yüklenirken hata oluştu:\n{e}"
            )






    def on_city_changed(self):
        """
        Şehir seçildiğinde çağrılır. Şehir adını alır ve ilçeleri yükler.
        """
        selected_text = self.dlg.city_names.currentText()  # Örn: '07 - Antalya'
        if selected_text:
            try:
                selected_city = selected_text.split(" - ", 1)[1]
                self.populate_districts_combobox(selected_city)
            except IndexError:
                pass







    def show_district_code(self, selected_city):
        """
        Seçilen ilçeye ait district code'u district_code combobox'una yazar.
        """
        try:
            selected_district = self.dlg.district.currentText()
            if not selected_district:
                return

            # Excel dosyasının yolu
            excel_path = os.path.join(self.plugin_dir, "iller_ve_ilceler.xlsx")

            # Excel'i oku
            df = pd.read_excel(excel_path)

            # Şehir ve ilçe ile filtrele
            matched_row = df[(df["PROVINCE"] == selected_city) & (df["DISTRICT NAME"] == selected_district)]

            # Kod varsa district_code combobox'a yaz
            if not matched_row.empty:
                district_code_value = str(matched_row.iloc[0]["DISTRICT CODE"])
                self.dlg.district_code.clear()
                self.dlg.district_code.addItem(district_code_value)

        except Exception as e:
            QMessageBox.critical(self.iface.mainWindow(), "Hata", f"District code alınamadı:\n{e}")






    def on_district_changed(self):
        """
        İlçe seçildiğinde district code'u ve okul listesini gösterir.
        """
        selected_city_text = self.dlg.city_names.currentText()
        if selected_city_text:
            try:
                selected_city = selected_city_text.split(" - ", 1)[1]
                self.show_district_code(selected_city)
                self.populate_schools_combobox(selected_city)  # 🔥 ÖNEMLİ KISIM
                # 1) Daha önceki durumları sıfırla: checkbox işaretini kaldır
                self.dlg.chk_link_obje.setChecked(False)
                # 2) Eğer combobox’a okul yüklendiyse, checkbox’u aktif et; değilse pasif bırak
                has_schools = self.dlg.schools.count() > 0
                self.dlg.chk_link_obje.setEnabled(has_schools)

            except IndexError:
                pass

        




    def open_meb_school_page(self):
        """
        Web checkbox işaretliyse, seçilen şehir ve ilçeye göre MEB okul sayfasını açar.
        """
        # 1. Checkbox işaretli değilse fonksiyondan çık
        if not self.dlg.web.isChecked():
            return

        try:
            # 2. Şehir ve ilçe adlarını al
            selected_city_text = self.dlg.city_names.currentText()  # Örn: '07 - Antalya'
            selected_district = self.dlg.district.currentText()

            # 3. Eğer seçimler boşsa durdur
            if not selected_city_text or not selected_district:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Lütfen il ve ilçe seçiniz.")
                return

            # 4. İl adını ayır (örn: '07 - Antalya' → 'Antalya')
            selected_city = selected_city_text.split(" - ", 1)[1]

            # 5. Plaka kodunu city_code_map'ten al
            plaka_kodu = self.city_code_map.get(selected_city)  # Örn: '07'

            if not plaka_kodu:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Plaka kodu alınamadı.")
                return

            # 6. Excel'den ilçe kodunu bul
            excel_path = os.path.join(self.plugin_dir, "iller_ve_ilceler.xlsx")
            df = pd.read_excel(excel_path)

            matched_row = df[
                (df["PROVINCE"] == selected_city) & (df["DISTRICT NAME"] == selected_district)
            ]

            if matched_row.empty:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "İlçe kodu bulunamadı.")
                return

            ilce_kodu = str(matched_row.iloc[0]["DISTRICT CODE"])  # Örn: '1035'

            # 7. URL'yi oluştur ve aç
            url = f"https://www.meb.gov.tr/baglantilar/okullar/index.php?ILKODU={plaka_kodu}&ILCEKODU={ilce_kodu}"
            webbrowser.open(url)

        except Exception as e:
            QMessageBox.critical(self.iface.mainWindow(), "Hata", f"Web sayfası açılırken hata:\n{e}")



    def getschools(self, plaka_kodu, ilce_kodu):
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC

        url = f"https://www.meb.gov.tr/baglantilar/okullar/index.php?ILKODU={plaka_kodu}&ILCEKODU={ilce_kodu}"

        options = Options()
        options.add_argument("--headless")
        options.add_argument("--disable-gpu")

        driver = webdriver.Chrome(options=options)

        try:
            driver.get(url)

            # Sayfa tamamen yüklenene kadar bekle
            school_elements = WebDriverWait(driver, 10).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, "table tbody tr td a"))
            )

            schools = [el.text.strip() for el in school_elements if el.text.strip()]
            return schools
        except Exception as e:
            print(f"Hata: {e}")
            return []
        finally:
            driver.quit()



    def populate_schools_combobox(self, selected_city):
        """
        Seçilen şehir ve ilçeye göre okulları MEB'ten çeker ve schools combobox'a yükler.
        """
        try:
            selected_district = self.dlg.district.currentText()
            if not selected_city or not selected_district:
                return

            # Plaka kodunu al
            plaka_kodu = self.city_code_map.get(selected_city)

            # Excel'den ilçe kodunu al
            excel_path = os.path.join(self.plugin_dir, "iller_ve_ilceler.xlsx")
            df = pd.read_excel(excel_path)

            matched_row = df[
                (df["PROVINCE"] == selected_city) & (df["DISTRICT NAME"] == selected_district)
            ]

            if matched_row.empty:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "İlçe kodu bulunamadı.")
                return


            ilce_kodu = str(matched_row.iloc[0]["DISTRICT CODE"])

            # MEB'ten okul isimlerini al
            school_list = self.getschools(plaka_kodu, ilce_kodu)

            # QComboBox'a yükle
            self.dlg.schools.clear()
            if school_list:
                for okul in school_list:
                    self.dlg.schools.addItem(okul)

            else:
                self.dlg.schools.addItem("Hiç okul bulunamadı.")
                

        except Exception as e:
            QMessageBox.critical(self.iface.mainWindow(), "Hata", f"Okullar yüklenemedi:\n{e}")


########## bu kısma kadar il ilçe okulları çekme ve link açtırma işlemi tamam. üst bölge 
#########################################################################################

    def get_schools_with_links(self, plaka_kodu, ilce_kodu):
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC

        chromedriver_path = os.path.join(
            self.plugin_dir, "driver", "chromedriver-win64", "chromedriver.exe"
        )
        if not os.path.isfile(chromedriver_path):
            raise FileNotFoundError(f"ChromeDriver bulunamadı: {chromedriver_path}")
        service = Service(executable_path=chromedriver_path)

        options = Options()
        options.add_argument("--headless")
        driver = webdriver.Chrome(service=service, options=options)
        try:
            url = f"https://www.meb.gov.tr/baglantilar/okullar/index.php?ILKODU={plaka_kodu}&ILCEKODU={ilce_kodu}"
            driver.get(url)

            # Tablo satırları yüklenene kadar bekle
            rows = WebDriverWait(driver, 15).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, "table tbody tr"))
            )

            schools = []
            for tr in rows:
                # 1) Okul adı: birinci td'nin düz metni
                name = tr.find_element(By.CSS_SELECTOR, "td:nth-child(1)").text.strip()

                # 2) Satırdaki tüm <a> etiketlerini topla
                anchors = tr.find_elements(By.TAG_NAME, "a")

                # 3) İlk a etiketi “Bilgi” linki olacak şekilde kullan
                link = anchors[0].get_attribute("href") if anchors else ""

                schools.append((name, link))

            return schools

        finally:
            driver.quit()



    def export_school_links_to_excel(self):
        """
        Seçili şehir/ilçe için wax metodu çalıştırır, (isim, link) listesini alır
        ve plugin dizininde 'okul_linkleri.xlsx' dosyasına yazar.
        """
        # 1) Combobox’tan şehir/ilçe kodlarını ayıkla
        entry = self.dlg.city_names.currentText()  # "06 - Ankara"
        plaka_kodu = entry.split(" - ")[0]          # "06"
        selected_district = self.dlg.district.currentText()
        ilce_kodu = self.district_code_map.get((plaka_kodu, selected_district))

        # 2) Wax metodu ile veri çek
        schools = self.get_schools_with_links(plaka_kodu, ilce_kodu)
        if not schools:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "Uyarı",
                "Hiç okul verisi alınamadı. Lütfen seçimlerinizi kontrol edin."
            )
            return

        # 3) Excel dosyası oluşturup yaz
        wb = Workbook()
        ws = wb.active
        ws.append(["Okul Adı", "Bilgi Linki"])
        for name, link in schools:
            ws.append([name, link])

        # 4) Kaydet ve bilgi ver
        file_path = os.path.join(self.plugin_dir, "okul_linkleri.xlsx")
        wb.save(file_path)
        QMessageBox.information(
            self.iface.mainWindow(),
            "Başarılı",
            f"Okul linkleri kaydedildi:\n{file_path}")

    def on_link_checkbox_changed(self, state):
        if state == Qt.Checked:
            # 1. O ANDAKİ şehir ve ilçe adını combobox’tan al
            city_text = self.dlg.city_names.currentText()   # "20 - Denizli"
            if not city_text:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Lütfen il seçiniz.")
                return
            selected_city = city_text.split(" - ", 1)[1]    # "Denizli"

            selected_district = self.dlg.district.currentText()
            if not selected_district:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Lütfen ilçe seçiniz.")
                return

            # 2. Plaka kodunu ve ilçe kodunu map’ten çek
            plaka_kodu = self.city_code_map.get(selected_city)
            ilce_kodu = self.district_code_map.get((selected_city, selected_district))
            if not plaka_kodu or not ilce_kodu:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Kodlar alınamadı.")
                return

            # 3. Okul adı/linki çek
            schools = self.get_schools_with_links(plaka_kodu, ilce_kodu)
            if not schools:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Hiç okul verisi alınamadı.")
                return

            # 4. Excel’e yaz
            from openpyxl import Workbook
            wb = Workbook()
            ws = wb.active
            ws.append(["Okul Adı", "Bilgi Linki"])
            for name, link in schools:
                ws.append([name, link])

            file_path = os.path.join(self.plugin_dir, f"{selected_city}_{selected_district}_okul_linkleri.xlsx")
            wb.save(file_path)
            QMessageBox.information(self.iface.mainWindow(), "Başarılı", f"Kaydedildi:\n{file_path}")



##### link işlemi okey linkler gelmektedir . 




    def get_school_coordinates(self, name, info_link):
        """
        Okul 'Bilgi' sayfasına gidip, /tema/harita.php içindeki
        Google Maps JavaScript’inden LatLng(...) değerini çekmeye çalışır.
        q= parametresi işe yaramazsa buradaki javascript tanımını parse eder.
        """
        import re

        # 1) map sayfası URL’si
        if "tema/harita.php" in info_link:
            map_url = info_link
        else:
            map_url = info_link.rstrip("/") + "/tema/harita.php"

        try:
            # 2) Sayfayı indir
            resp = requests.get(map_url, timeout=10)
            resp.raise_for_status()
            text = resp.text

            # 3) Önce iframe src içindeki q=lat,lon’u dene
            m = re.search(r"embed/v1/place\?[^\"']*q=([0-9\.\-]+),([0-9\.\-]+)", text)
            if m:
                return float(m.group(1)), float(m.group(2))

            # 4) Fallback: JavaScript içinde LatLng(lat, lon) tanımını ara
            m2 = re.search(r"LatLng\(\s*([0-9\.\-]+)\s*,\s*([0-9\.\-]+)\s*\)", text)
            if m2:
                return float(m2.group(1)), float(m2.group(2))

        except Exception as e:
            # İsteğe bağlı: konsola hata bas
            print(f"[get_school_coordinates] {name} hata: {e}")

        # Bulunamazsa None döndür
        return None, None
    def on_kordi_checkbox_changed(self, state):
        """
        chk_kordi işaretlendiğinde koordinat çekme & Excel yazma tetiklenir.
        """
        if state == Qt.Checked:
            self.export_school_coords_to_excel()


    def export_school_coords_to_excel(self):
        """
        Okul isimlerini ve koordinatlarını çekip
        plugin dizininde '{il}_{ilce}_okul_koordinatlari.xlsx' olarak kaydeder.
        """
        try:
            # 1) O anki şehir ve ilçe adını combobox’tan al
            city_text = self.dlg.city_names.currentText()   # "20 - Denizli"
            if not city_text:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Lütfen il seçiniz.")
                return
            selected_city = city_text.split(" - ", 1)[1]    # "Denizli"

            selected_district = self.dlg.district.currentText()
            if not selected_district:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Lütfen ilçe seçiniz.")
                return

            # 2) Plaka kodunu ve ilçe kodunu map’ten çek
            plaka_kodu = self.city_code_map.get(selected_city)
            ilce_kodu = self.district_code_map.get((selected_city, selected_district))
            if not plaka_kodu or not ilce_kodu:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Kodlar alınamadı.")
                return

            # 3) Okul listesi (isim, link)
            schools = self.get_schools_with_links(plaka_kodu, ilce_kodu)
            if not schools:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Hiç okul verisi alınamadı.")
                return

            # 4) Excel hazırlığı
            from openpyxl import Workbook
            wb = Workbook()
            ws = wb.active
            ws.append(["Okul Adı", "Latitude", "Longitude"])

            # 5) Her okul için enlem/boylam al ve string olarak yaz
            for name, link in schools:
                lat, lon = self.get_school_coordinates(name, link)
                lat_s = f"{lat:.14f}" if lat is not None else ""
                lon_s = f"{lon:.14f}" if lon is not None else ""
                ws.append([name, lat_s, lon_s])

            # 6) Kaydet ve kullanıcıyı bilgilendir
            file_path = os.path.join(self.plugin_dir, f"{selected_city}_{selected_district}_okul_koordinatlari.xlsx")
            wb.save(file_path)
            QMessageBox.information(
                self.iface.mainWindow(),
                "Başarılı", f"Koordinatlar kaydedildi:\n{file_path}"
            )

        except Exception as e:
            QMessageBox.critical(
                self.iface.mainWindow(),
                "Hata", str(e)
            )

######################## koordinat çekme işlemleri tamamlando .




    def on_theme_checkbox_changed(self, state):
        if state != Qt.Checked:
            return

        try:
            # 1) O anda seçili il ve ilçe adını combobox’tan al
            city_text = self.dlg.city_names.currentText()   # "20 - Denizli"
            if not city_text:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Lütfen il seçiniz.")
                return
            selected_city = city_text.split(" - ", 1)[1]    # "Denizli"

            selected_district = self.dlg.district.currentText()
            if not selected_district:
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", "Lütfen ilçe seçiniz.")
                return

            # 2) Excel dosya adını dinamik oluştur
            excel_path = os.path.join(self.plugin_dir, f"{selected_city}_{selected_district}_okul_koordinatlari.xlsx")
            if not os.path.isfile(excel_path):
                QMessageBox.warning(self.iface.mainWindow(), "Uyarı", f"Dosya bulunamadı:\n{excel_path}")
                return

            # 3) Excel’den oku
            import pandas as pd
            df = pd.read_excel(excel_path)

            # 4) Eksik koordinatları atla
            df = df.dropna(subset=["Latitude", "Longitude"])

            # 5) Bellek katmanı oluştur (OpenStreetMap üzerinde nokta olarak işaretlenecek)
            from qgis.core import QgsVectorLayer, QgsField, QgsFeature, QgsGeometry, QgsPointXY, QgsProject
            from PyQt5.QtCore import QVariant

            mem_layer = QgsVectorLayer("Point?crs=EPSG:4326", "Okul Noktaları", "memory")
            prov = mem_layer.dataProvider()
            prov.addAttributes([
                QgsField("name", QVariant.String),
                QgsField("lat", QVariant.Double),
                QgsField("lon", QVariant.Double),
            ])
            mem_layer.updateFields()

            # 6) DataFrame’den feature’ları ekle
            feats = []
            for _, row in df.iterrows():
                name = row["Okul Adı"]
                lat  = row["Latitude"]
                lon  = row["Longitude"]
                if pd.isna(lat) or pd.isna(lon):
                    continue
                feat = QgsFeature(mem_layer.fields())
                feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(lon, lat)))
                feat["name"] = name
                feat["lat"]  = lat
                feat["lon"]  = lon
                feats.append(feat)
            prov.addFeatures(feats)
            mem_layer.updateExtents()

            # 7) Haritaya ekle
            QgsProject.instance().addMapLayer(mem_layer)
        

            QMessageBox.information(
                self.iface.mainWindow(),
                "Tema Uygulandı",
                f"{len(feats)} okul noktası haritaya eklendi."
            )

        except Exception as e:
            QMessageBox.critical(
                self.iface.mainWindow(),
                "Hata",
                f"Tema uygulanırken hata oluştu:\n{e}"
            )



################ tematik map oluşturulma tamamlandıııııııııı.can
    
    def create_school_layer_with_popups(self, excel_path):
        df = pd.read_excel(excel_path)
        df = df.dropna(subset=["Latitude", "Longitude"])
        mem_layer = QgsVectorLayer("Point?crs=EPSG:4326", "Okul Noktaları", "memory")
        prov = mem_layer.dataProvider()
        prov.addAttributes([
            QgsField("name", QVariant.String),
            QgsField("lat", QVariant.Double),
            QgsField("lon", QVariant.Double),
            QgsField("okul_turu", QVariant.String),
        ])
        mem_layer.updateFields()
        feats = []
        for _, row in df.iterrows():
            name = row["Okul Adı"]
            lat  = row["Latitude"]
            lon  = row["Longitude"]
            name_lower = name.lower()
            if "ilkokul" in name_lower:
                okul_turu = "primary"
            elif "ortaokul" in name_lower:
                okul_turu = "middle"
            elif "lise" in name_lower:
                okul_turu = "high"
            else:
                okul_turu = "other"
            feat = QgsFeature(mem_layer.fields())
            feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(lon, lat)))
            feat["name"] = name
            feat["lat"] = lat
            feat["lon"] = lon
            feat["okul_turu"] = okul_turu
            feats.append(feat)
        prov.addFeatures(feats)
        mem_layer.updateExtents()
        picture_path = os.path.join(self.plugin_dir, "picture")
        primary_img = os.path.join(picture_path, "primary.png").replace("\\", "/")
        middle_img = os.path.join(picture_path, "middle school.png").replace("\\", "/")
        high_img = os.path.join(picture_path, "high school.png").replace("\\", "/")
        expression = """
        CASE
        WHEN lower("okul_turu") = 'primary'
            THEN '<html><body><div style="display: flex; align-items: center;"><img src="file:///{primary_img}" width="48" height="48" style="margin-right: 8px;"><span style="font-size: 14pt; font-weight: bold;">' || "name" || '</span></div></body></html>'
        WHEN lower("okul_turu") = 'middle'
            THEN '<html><body><div style="display: flex; align-items: center;"><img src="file:///{middle_img}" width="48" height="48" style="margin-right: 8px;"><span style="font-size: 14pt; font-weight: bold;">' || "name" || '</span></div></body></html>'
        WHEN lower("okul_turu") = 'high'
            THEN '<html><body><div style="display: flex; align-items: center;"><img src="file:///{high_img}" width="48" height="48" style="margin-right: 8px;"><span style="font-size: 14pt; font-weight: bold;">' || "name" || '</span></div></body></html>'
        ELSE '<html><body><span style="font-size: 14pt; font-weight: bold;">' || "name" || '</span></body></html>'
        END
        """.format(primary_img=primary_img, middle_img=middle_img, high_img=high_img)
        mem_layer.setMapTipTemplate(expression)
        QgsProject.instance().addMapLayer(mem_layer)
    


    def create_school_layer_with_popups(excel_path, plugin_dir):
        df = pd.read_excel(excel_path)
        df = df.dropna(subset=["Latitude", "Longitude"])
        mem_layer = QgsVectorLayer("Point?crs=EPSG:4326", "Okul Noktaları", "memory")
        prov = mem_layer.dataProvider()
        prov.addAttributes([
            QgsField("name", QVariant.String),
            QgsField("lat", QVariant.Double),
            QgsField("lon", QVariant.Double),
            QgsField("okul_turu", QVariant.String),
        ])
        mem_layer.updateFields()
        feats = []
        for _, row in df.iterrows():
            name = row["Okul Adı"]
            lat  = row["Latitude"]
            lon  = row["Longitude"]
            name_lower = name.lower().replace("-", " ").replace("_", " ")
            # En esnek eşleşme:
            if "ilkokul" in name_lower or "ilk okul" in name_lower:
                okul_turu = "primary"
            elif "ortaokul" in name_lower or "orta okul" in name_lower:
                okul_turu = "middle"
            elif "lise" in name_lower:
                okul_turu = "high"
            else:
                okul_turu = "other"
            feat = QgsFeature(mem_layer.fields())
            feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(lon, lat)))
            feat["name"] = name
            feat["lat"] = lat
            feat["lon"] = lon
            feat["okul_turu"] = okul_turu
            feats.append(feat)
        prov.addFeatures(feats)
        mem_layer.updateExtents()
        QgsProject.instance().addMapLayer(mem_layer)



    def on_labels_checkbox_changed(self, state):
        layer = None
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == "Okul Noktaları":
                layer = lyr
                break
        if layer is None:
            return
        if state == Qt.Checked:
            picture_path = os.path.join(self.plugin_dir, "picture")
            middle_img = os.path.join(picture_path, "middle school.png").replace("\\", "/")
            expression = """
    <html><body>
    <div style="display: flex; align-items: center;">
        <img src="file:///""" + middle_img + """" width="36" height="36" style="margin-right: 8px;">
        <span style="font-size: 13pt; font-weight: bold;">[% "name" %]</span>
    </div>
    </body></html>
            """
            layer.setMapTipTemplate(expression)
        else:
            layer.setMapTipTemplate('"name"')


    def on_chk_link_obje_changed(self, state):
        # chk_link_obje işaretli ise, chk_kordi aktif olsun, değilse pasif ve işareti kalksın
        if state == 2:  # işaretli
            self.dlg.chk_kordi.setEnabled(True)
        else:
            self.dlg.chk_kordi.setChecked(False)
            self.dlg.chk_kordi.setEnabled(False)


    def on_chk_kordi_changed(self, state):
        # chk_kordi işaretli ise, theme_checkbox aktif olsun, değilse pasif ve işareti kalksın
        if state == 2:  # işaretli
            self.dlg.theme_checkbox.setEnabled(True)
        else:
            self.dlg.theme_checkbox.setChecked(False)
            self.dlg.theme_checkbox.setEnabled(False)




    def on_haritada_goster_clicked(self):
        import shutil
        import os

        city_text = self.dlg.city_names.currentText()
        if not city_text or " - " not in city_text:
            QMessageBox.warning(self.dlg, "Uyarı", "Lütfen şehir seçiniz.")
            return
        selected_city = city_text.split(" - ", 1)[1]
        selected_district = self.dlg.district.currentText()
        if not selected_district:
            QMessageBox.warning(self.dlg, "Uyarı", "Lütfen ilçe seçiniz.")
            return

        # 1. Okul linkleri kaydedilsin
        if self.dlg.chk_link_obje.isChecked():
            self.on_link_checkbox_changed(Qt.Checked)
            eski = os.path.join(self.plugin_dir, "okul_linkleri.xlsx")
            yeni = os.path.join(self.plugin_dir, f"{selected_city}_{selected_district}_okul_linkleri.xlsx")
            if os.path.exists(eski):
                try:
                    if os.path.exists(yeni):
                        os.remove(yeni)
                    shutil.move(eski, yeni)
                except Exception as e:
                    QMessageBox.warning(self.dlg, "Uyarı", f"Dosya yeniden adlandırılırken hata oluştu: {e}")

        # 2. Koordinatlar kaydedilsin
        if self.dlg.chk_kordi.isChecked():
            self.on_kordi_checkbox_changed(Qt.Checked)

        # 3. Tematik harita işlemi
        if self.dlg.theme_checkbox.isChecked():
            excel_path = os.path.join(self.plugin_dir, f"{selected_city}_{selected_district}_okul_koordinatlari.xlsx")
            if not os.path.exists(excel_path):
                QMessageBox.critical(self.dlg, "Hata", f"Excel dosyası bulunamadı:\n{excel_path}")
                return
            self.on_theme_checkbox_changed(Qt.Checked)

        # 4. Label işlemi (ikonların görünmesini tekrar garanti altına al!)
        if self.dlg.chk_labels.isChecked():
            # Layer'ı bul
            layer = None
            for lyr in QgsProject.instance().mapLayers().values():
                if lyr.name() == "Okul Noktaları":
                    layer = lyr
                    break
            if layer is not None:
                picture_path = os.path.join(self.plugin_dir, "picture")
                middle_img = os.path.join(picture_path, "middle school.png").replace("\\", "/")
                # Burada kendi MapTipTemplate'ini, eskiden çalıştığı gibi ayarla!
                expression = """
    <html><body>
    <div style="display: flex; align-items: center;">
        <img src="file:///""" + middle_img + """" width="36" height="36" style="margin-right: 8px;">
        <span style="font-size: 13pt; font-weight: bold;">[% "name" %]</span>
    </div>
    </body></html>
                """
                layer.setMapTipTemplate(expression)
            else:
                # Layer bulunamazsa, en azından uyarı
                print("Okul Noktaları katmanı bulunamadı.")
        else:
            # Label kutusu işaretli değilse, MapTipTemplate'i sadeleştir
            layer = None
            for lyr in QgsProject.instance().mapLayers().values():
                if lyr.name() == "Okul Noktaları":
                    layer = lyr
                    break
            if layer is not None:
                layer.setMapTipTemplate('"name"')













    def run(self):

        if self.first_start == True:
            self.first_start = False
            self.dlg = CanKahramanDialog()
            self.dlg.chk_kordi.setEnabled(False)
            self.dlg.theme_checkbox.setEnabled(False)
            self.dlg.pushButton.button(self.dlg.pushButton.Ok).setText("Haritada Göster")
            self.dlg.pushButton.button(self.dlg.pushButton.Cancel).setText("Vazgeç")
            self.dlg.pushButton.clicked.connect(self.on_haritada_goster_clicked)


        
        self.populate_city_names_combobox() # illeri , city_names adlı comboxa yüklers
        self.dlg.city_names.currentIndexChanged.connect(self.on_city_changed) # şehir seçildiginde district adlı comboboxa ilçeleri yükle 
        self.dlg.district.currentIndexChanged.connect(self.on_district_changed) #ilçe kodları
        #self.dlg.chk_link_obje.stateChanged.connect(self.on_chk_link_obje_changed)
        #self.dlg.chk_kordi.stateChanged.connect(self.on_chk_kordi_changed)
        self.dlg.chk_link_obje.stateChanged.connect(self.on_chk_link_obje_changed)  # sadece chk_kordi'yi enable/disable yapar
        self.dlg.chk_kordi.stateChanged.connect(self.on_chk_kordi_changed)          # sadece theme_checkbox'u enable/disable yapar   

        self.dlg.chk_labels.stateChanged.connect(self.on_labels_checkbox_changed)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
       
        if result:

            self.open_meb_school_page()  # siteyi aç checkbox işaretlendigi ve plugin çalıştırıldıgında siteyi aç
                    # Do something useful here - delete the line containing pass and
                    # substitute with your code.
    
        
            pass